The purpose of this solution is to provide a generic framework to make writing MFTs (Media Foundation Transforms) easier.  If you don't know what 
an MFT is, visit https://msdn.microsoft.com/en-us/library/windows/desktop/ms703138%28v=vs.85%29.aspx for more info.

In particular, this framework helps create asynchronous MFTs that have exactly 1 input and 1 output stream.  Asynchronous MFTs have a variety of advantages over the older approach, including the ability to support multiple processing threads.

For help creating synchronous MFTs, see HowTo.txt.

This doc has 5 sections:

1) Creating a new MFT
2) Basics for writing an MFT.
3) Some of the extras for advanced MFTs.
4) Distributing/using the MFT.
5) FAQ.

Section 1 - Creating a new project

The simplest way to create your own MFT is to take one of the existing samples and modify it to fit your own needs.  If you do that, make sure you:

- Change the CLSID on the class (very important!).
- Change the class name (yes, it matters).
- Modify the input/output types supported or the OnProcessSample code to fit your needs (see below for discussion).

Or you can create a new project from scratch:

Create a class derived from AsyncMFTBase.  It should have these attributes:

   [ComVisible(true),
   Guid("your guid goes here"),
   ClassInterface(ClassInterfaceType.None)]
   public class MyClass : AsyncMFTBase

Generate your own unique Guid (for example using Tools/Create GUID in Visual Studio).

If you want your MFT registered with MFTRegister (which is NOT a requirement, see Distributing/using the MFT), then create a method with the ComRegisterFunctionAttribute.  If your object is intended to be registered with COM (also not a requirement), set the build property for "Register for COM interop."  This may require running Visual Studio as an administrator.

Create a public constructor for your class.  This method must take zero arguments, and invoke the base constructor with a single argument.  This argument is the number of asynchronous processing threads to use.  There are some tricks to correctly supporting more than 1 thread (see FAQ).  Unless you find your MFT is cpu-bound, it is recommended to set this value to 1.

    public MyClass()
        : base(1)
    { }

Section 2 - Basics for writing an MFT.

There are two core parts to writing an MFT:

a) Specifying the input and output types you support.
b) Process the input samples into the output samples.

Section 1a - Specifying the input and output types.

There are (basically) 4 methods that control validating and enumerating your input & output types (OnCheckInputType, OnCheckOutputType, OnEnumInputTypes, & OnEnumOutputTypes).  You may not actually have to write all 4, since there are default implementations that may already do what you want.  You only need to override if the default is not correct for your needs.  Further, there are a number of helper functions in the framework to simplify writing these (sometimes down to a single statement).  Some common scenarios to illustrate how this might work:

1&2) Like the WriteText example, you could 

- Support one partial input type (MFMediaType.Video + MFMediaType.RGB32).
- Require that a full input media type be sent to IMFTransform::SetInputType (and approved by OnCheckInputType) before any output type can be set.
- Limit the output type to always be exactly the same as the input type.

Or, like the Grayscale example, you can 

- Support multiple partial input types (MFMediaType.Video + MFMediaType.NV12, MFMediaType.Video + MFMediaType.YUY2, MFMediaType.Video + MFMediaType.UYVY).
- Require that a full input media type be sent to IMFTransform::SetInputType (and approved by OnCheckInputType) before any output type can be set.
- Limit the output type to always be exactly the same as the input type.

For these two cases:

- Create a GUID array that contains the subtype(s) you support.
- In OnCheckInputType, use CheckMediaType() and pass the GUID array.
- In OnEnumInputTypes use CreatePartialType() and pass the GUID array.
- Use the default implementation for OnCheckOutputType and OnEnumOutputTypes.

If you support multiple input types, list them in the preferred order, where 'preferred' means whatever the MFT writer wants it to mean: Performance, output size, colorspace quality, etc.

3) Like the TypeConverter example, you can 

- Support one partial input type (MFMediaType.Video + MFMediaType.YUY2).
- Require that a full input media type be sent to IMFTransform::SetInputType (and approved by OnCheckInputType) before any output type can be set.
- Limit the output type to one fully-populated output type that is calculated based on the input type.

In this case:

- Create a GUID array that contains a single entry.
- In OnCheckInputType, use CheckMediaType and pass the GUID array.
- In OnEnumInputTypes use CreatePartialType and pass the GUID array.
- Use the default implementation for OnCheckOutputType and OnEnumOutputTypes, but write your own implementation of CreateOutputFromInput (which is used by the default implementations in both of those routines).

CreateOutputFromInput can either make minor modifications to the input type, or create an entirely new type.

4) Like none of the existing examples, you might be using complete media types for input types, or have multiple output types that are completely unrelated to the input types (for example some type of decoder).

Instead of using any of the helpers, you can just override each of the 4 methods to return whatever values you need.

Section 1b - Process the input samples into the output samples.

Before you start writing OnProcessSample, there are two other simple routines you need to write first: OnGetInputStreamInfo & OnGetOutputStreamInfo.  These routines deal with setting flags that describe how you will be working with input and output samples.  See MSDN for details about MFT_INPUT_STREAM_INFO & MFT_OUTPUT_STREAM_INFO.

How you process samples depends on how you set those flags.  For example, will you be modifying the samples "in-place" (like the Grayscale sample)?  Or creating entirely new samples (like TypeConverter)?  Unless you plan on doing advanced work, you need to at least set MFTOutputStreamInfoFlags.ProvidesSamples.

When your OnProcessSample routine is called, you will be passed an input sample to process.  Here are some possible cases of what happens from there:

1) You are modifying "in-place": 
- Call HandleDiscontinuity() using the input sample and the Discontinuity flag you were passed.
- Modify the input sample in whatever way you intend (must match the MFT's output type).
- Send the new output sample to OutputSample(), using the InputMessageNumber you were provided.
- Do NOT call SafeRelease on the input sample.

2) You are creating a new output sample from the input:
- Create the new IMFSample.
- Call HandleDiscontinuity() using the *output* sample and the Discontinuity flag you were passed.
- Populate the output sample in whatever way you intend, referring to the input sample (or not) as needed.
- Send the new output sample to OutputSample(), using the InputMessageNumber you were provided.
- DO call SafeRelease on the input sample.

3) You are creating multiple output samples from the input:
- Call HandleDiscontinuity() on only the first output sample, using the Discontinuity flag you were passed.
- Populate each output sample in whatever way you intend, referring to the input sample (or not) as needed.
- Send the new output sample to OutputSample(), using the InputMessageNumber you were provided.
- DO call SafeRelease on the input sample.
- Do NOT increment InputMessageNumber between samples.  Always use the exact value you were provided.

When OnProcessSample is called, you are expected to generate all the samples you can from pInputSample, and send them to OutputSample().  If there is enough data to generate 3.5 samples, you should send 3 samples to OutputSample, then store the partial data in a member variable for the next call (or OnDrain).

2) Some of the extras for advanced MFTs.

Here are all the virtuals that your class may override:

    abstract protected int OnCheckInputType(IMFMediaType pmt);
    virtual protected int OnCheckOutputType(IMFMediaType pmt)

    virtual protected int OnEnumInputTypes(int dwTypeIndex, out IMFMediaType pInputType)
    virtual protected int OnEnumOutputTypes(int dwTypeIndex, out IMFMediaType pOutputType)

    abstract protected void OnGetInputStreamInfo(ref MFTInputStreamInfo pStreamInfo);
    abstract protected void OnGetOutputStreamInfo(ref MFTOutputStreamInfo pStreamInfo);

    virtual protected IMFMediaType CreateOutputFromInput()

    abstract protected void OnProcessSample(IMFSample pInputSample, bool Discontinuity, int InputMessageNumber);

    virtual protected void OnSetInputType()
    virtual protected void OnSetOutputType()
    virtual protected void OnDrain(int InputMessageNumber)
    virtual protected void OnStartStream()
    virtual protected void OnEndStream()

The first 8 were discussed above.

OnSetInputType is the best place to cache settings from the input type, plan on which processing routines you are going to call, and generally get set up to do things.  It might be tempting to do this in OnStartStream, but there's a reason to use OnSetInputType:  All asynchronous MFTs must support dynamic format changes.  This means that it is possible that after a stream starts, you will be called to support a new format type (for example: the RotateAsync sample changes output types during streaming if the orientation of the video gets changed, possibly affecting downstream MFTs).

OnStartStream is useful for resetting between streams, and OnEndStream is a good time to release resources/reset back to defaults.

OnDrain is called when a stream is coming to an end.  If you have partial data left over that still needs to be output, this is the time.  The AudioDelay produces the remaining parts of the 'echos' during this call.

There are a bunch of utility functions that might be useful.  You will see most of these being used somewhere in the samples.  Their function should be clear from the name, but if not, there are comments in the source, and of course you have the full source code.

Debug writers.  TraceAttributes is a great tool for examining IMFMediaTypes and IMFSamples.
    protected static void TraceAttributes(IMFAttributes ia)
    protected static void Trace(string s)

Described above:
    protected static void HandleDiscontinuity(bool Discontinuity, IMFSample pSample)
    protected void OutputSample(IMFSample pSample, int InputMessageNumber)
    protected static int CheckMediaType(IMFMediaType pmt, Guid gMajorType, Guid[] gSubTypes)
    protected static int CreatePartialType(int dwTypeIndex, Guid gMajorType, Guid[] gSubTypes, out IMFMediaType ppmt)

Duh:
    protected static int IsIdentical(IMFMediaType a, IMFMediaType b)
    protected static IMFMediaType CloneMediaType(IMFMediaType inType)

Accessors:
        protected IMFMediaType InputType
        protected IMFMediaType OutputType
        protected IMFAttributes Attributes
        protected int Threshold
        protected bool IsShutdown
        protected bool IsStreamActive
        protected bool IsFlushing

Section 4 - Distributing/using the MFT.

The code in this project is public domain, so there are no legal requirements involved in using it (with the exceptions of the LGPL or BSD for MediaFoundation.dll).  While it would be nice to have a mention in your docs and/or an emailed "thanks", even more useful would be some contribution to make the project better.  Bug fixes, doc improvements, additional samples, etc to make things better/easier for the next guy, the way this project has made things easier for you.

What kind of installation you need to do for your MFT depends on how you are going to use it.  There are 4 general cases:

1) Your MFT can be installed as a regular COM object, and created via CoCreateInstance by anyone who knows its CLSID.  This requires you to register your dll using the regasm tool (possibly twice if you support both x86 and x64).
2) Your MFT can be registered with both COM and MediaFoundation.  It will be discoverable by any application using MFTEnumEx, and may be used automatically by some MF functions.  This requires using MFTRegister, which is performed for you automatically if the OnGetCategory function is implemented and returns a non-Empty value.

There is a third case that might be useful for some situations, which affects some of the discussion above.

3) You can actually compile your MFT right into your executable (instead of producing a DLL), and create an instance using 'new' (ie MyMft m = new MyMft()).  This instance can be passed to methods such as IMFMediaEngineEx::InsertVideoEffect or added to a topology node using SetObject().  This approach requires no COM registration, or registration with MFTRegister.

4) You can use Register-free COM to be able to run your COM objects WITHOUT requiring admin rights to install them.  See google.


Section 5 - FAQ:

Q: Can a project be "Any CPU" instead of having both x86 and x64?
A: It is possible to create a project using "Any CPU."  None of the samples do this to avoid confusion over the fact that when you build the project in VS, it will only do 1 regasm (x86).  If you modify your build settings to run both regasms, then you only need 1 configuration.

Q: How do I support multiple processing threads?
A: At its simplest, you just change the parameter passed to the base class constructor, and the specified number of processing threads will get created.  Multiple threads can be processing input samples at the same time.  However, since output samples must be in the proper order, there is some synchronization that is done by the framework when calling OutputSample().

For some some MFTs, it's just that simple.  For example, consider the Grayscale MFT.  Each sample is completely independant, and can be processed in any order.  While they need to be output in a specific order, that is handled for you automatically by OutputSample.  So Grayscale can use numbers > 1.  However it doesn't, because there is so little work being done by the MFT, that there isn't any real benefit to setting it higher.  After processing just a few samples, all the threads will be put to sleep until more output is needed, so having multiple threads doesn't help much.

For some MFTs, it just isn't practical.  Consider the AudioDelay MFT.  It creates a buffer, and as each input sample is processed, the buffer gets updated.  In order for the echos to work properly, the buffer must be written to sequentially.  While you could synchronize your threads so they always process in order, if the threads can only operate sequentially, there is no benefit to having more than 1 thread.

Whether your MFT can support multiple threads depends on what kind of processing you are doing, and whether there is inter-dependance between the samples, and how much work you are willing to put into it.

While I'm on the subject:  There is a temptation to set this number very high for "maximum performance."  However, setting it too high can either end up with lots of sleeping threads, or starve other components from getting cpu time.  Also remember that your MFT may run on systems that have fewer and less capable cores than your development machine.

Q: How is exception handling, umm, handled?
A: All the IMFTransform interface methods are wrapped with try/catch to turn exceptions into HRESULTs.  If the MFT's caller is c/c++, that would be done automatically.  However if the caller is c#, the exception propagates up into the caller's code (which is probably not what we want).

Since the interface methods use try/catch, you can throw exceptions from your methods.  However, exceptions can really ruin performance.  So you should only do this for situations that you never expect to actually happen.  Especially since returning non-zero values will probably end up shutting down the stream.

Q: Using SafeRelease/Marshal.ReleaseComObject in the MFT.
A: This is a huge pain when working with COM objects in c# code.  Normally c# code release objects "when it's convenient."  However, c# has no visibility to how much memory is used by a COM object, so it can't see that just a few seconds worth of IMFSamples can run a 32bit app out of memory.  On the other hand, releasing objects allocated by other c# components can cause them to crash.

Generally speaking, any COM objects you create in your code (for example getting the IMFMediaBuffer from IMFSample::ConvertToContiguousBuffer) should be released when you are done with it (consider using 'try/finally').  Hopefully this will always be safe, since the consequences of not doing it are huge memory usage.

There are a number of places in the framework where it seems like it would make sense to release the objects, but I don't.  I have often left the SafeRelease call in place but commented out to show that I considered using it, but decided I couldn't.

Q: Sometimes my program seems to use a lot of memory, but it doesn't seem to be leaking?
A: Having the 'Trace' call at the top of each entry point makes debugging easier, and provides insight into how the client works.  However, it really messes up performance (among other things).  If you are seeing odd behavior, try commenting out the Debug.WriteLine in Trace.

Q: What if I want to support additional interfaces (either MF interfaces or a custom interface)?
A: If you need your MFT to support additional interfaces, simply add them to the class declaration of your derived class, along with the implementation.

Q: It seems like my processing threads spend a lot of time asleep.  How does the framework decide how many samples to keep active at once?
A: This is both a very simple, and surprisingly complex question.

When writing this, my first intent was to "always keep the processing threads busy."  However, this ends up using huge amounts of memory when hundreds of samples end up queued in the output buffer.  This happens if the processing is faster than the consumer.

My second attempt was "always keep a few samples in the output queue."  But you can't request more input samples just because the output queue is empty.  What if your samples are being consumed faster than they are being produced?  Requesting hundreds of input samples isn't going to speed things up any.

So the answer I settled on was to figure out (roughly) how many samples were in the input + output queues, plus how many are being processed.  If that number drops below my 'threshold' (m_ThreadCount * 2), I ask for more input samples.

This seems to work well for cases where every input sample generates a single output sample.  And probably for cases where each input sample generates multiple output samples.  But it's going to work poorly for cases where multiple input samples are needed for each output sample.  In that case, you will either need to modify SendNeedEvent(), or change your constructor to modify the value of Threshold.

Q: What do I need to do to support Dynamic Format Changes?
A: All Async MFTs *must* support dynamic format changes (by spec).  This means that in the middle of processing samples, MF might change the format and start sending samples in a different format.  

Relax, it's not as bad as it sounds.  While the framework has to do some backflips, to you, it's pretty much business as usual.  If the format changes, you are guaranteed that these things will happen, in this order:

1) Your OnCheckInputType will get called to see if your MFT even supports the new format.
2) All samples from the old format will be sent to OnProcessSample before either the input or output types are changed.
3) OnSetInputType will be called with the new input type.
4) OnCheckOutputType will be called using the current output type.  This tells the framework if the current output type can be produced from the new input type.  If it can't, the regular OnEnumOutputTypes, OnCheckOutputType, OnSetOutputType approach will be used to select a new output type.
5) Samples for the new type will be sent to OnProcessSample.

When you come down to it, that's basically what happens when the stream first starts.  If you code works for that, dynamic format changes shouldn't be an issue.

Q: I want to climb in to the guts of this to see how it all works (or to add support for other features).
A: There is a *big* comment above ProcessingThread that is worth reading.

Q: What if I want to make changes to the template?
A: While I hope that isn't necessary, you may need to do this.  You've got the full source, and the template license is public domain, so help yourself.

That said, if the reason you are making a change is because there is a bug, performance issue or any other change that would be useful to others, I hope you will choose to share it and make things better for everyone.
